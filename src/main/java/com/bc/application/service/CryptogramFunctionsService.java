package com.bc.application.service;

import com.bc.application.domain.CryptogramRequest;
import com.bc.application.domain.CryptogramResponse;
import com.bc.application.enumeration.CryptogramVersionNumber;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

/**
 * Core domain service hosting the methods for performing various cryptogram related functions.
 */
@ApplicationScoped
public abstract class CryptogramFunctionsService<Command, CommandToDomainMapper> {
    // Command object to domain mapper
    @Inject
    protected CommandToDomainMapper commandToDomainMapper;
    /**
     * Driver method for generating an Application Cryptogram.
     * @param command Command object with the Application Cryptogram generation request.
     * @return CryptogramResponse domain object with the generated cryptogram value.
     */
    public abstract CryptogramResponse getApplicationCryptogram(Command command);
    /**
     * Method to build and map the command object to Cryptogram Request domain object.
     * @param command Application Cryptogram Request command object.
     * @return CryptogramRequest domain object generated by mapping command object.
     */
    protected abstract CryptogramRequest buildDomainObjectFromCommand(Command command);
    /**
     * Method to derive Unique Derivation Key (UDK) from Issuer Master Key (IMK) for cryptogram generation.
     * @param issuerMasterKey Issuer Master Key from request.
     * @param pan Primary Account Number from request.
     * @param panSequenceNumber PAN sequence number from request.
     * @param cryptogramVersionNumber Cryptogram version number determined from Issuer Application Data.
     * @return UDK generated from IMK.
     */
    protected abstract String getUniqueDerivationKey(String issuerMasterKey, String pan, String panSequenceNumber,
                                                     CryptogramVersionNumber cryptogramVersionNumber);
    /**
     * Method to derive Unique Derivation Key (UDK) from Issuer Master Key (IMK) for cryptogram generation.
     * @param uniqueDerivationKey UDK deriver from IMK.
     * @param applicationTransactionCounter Application Transaction Counter from request.
     * @param cryptogramVersionNumber Cryptogram version number determined from Issuer Application Data.
     * @return Session Key generated from UDK.
     */
    protected abstract String getSessionKey(String uniqueDerivationKey, String applicationTransactionCounter,
                                            CryptogramVersionNumber cryptogramVersionNumber);
    /**
     * Method to build and map the Cryptogram Response domain object to Response DTO class.
     * @param arqc Application Cryptogram generated.
     * @return CryptogramResponse object containing generated Application Cryptogram.
     */
    protected abstract CryptogramResponse buildResponseObjectFromDomain(String  arqc);
    /**
     * Method to call the Payment Scheme specific cryptogram generation request.
     * @param cryptogramRequest Cryptogram Request domain object.
     * @param sessionKey Session Key generated from UDK.
     * @return Application Cryptogram generated by Payment Scheme specific service.
     */
    protected abstract String generateCryptogram(CryptogramRequest cryptogramRequest, String sessionKey,
                                                 CryptogramVersionNumber cryptogramVersionNumber,
                                                 String cardVerificationResults);
    /**
     * Method for logging the input data and output data for the CryptogramFunctions service request, when the debug log level is enabled.
     */
    protected abstract void debugLog(Object object);

}